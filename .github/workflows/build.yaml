on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  CACHE_DIR: "${{ github.workspace }}/.cache"
  TASK_TEMP_DIR: "${{ github.workspace }}/.cache/task"
  DENO_DIR: "${{ github.workspace }}/.cache/deno"
  PUBLISH_REGISTRY: ghcr.io

jobs:
  checks:
    name: Coding Checks
    runs-on: ubuntu-22.04
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Tooling
        run: ./.github/scripts/install-tooling.sh
        env:
          INSTALL_PATH: /usr/local/bin
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Deno caching
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*') }}
      - name: Run checks
        run: |
          task checks
  test:
    name: Test code
    runs-on: ubuntu-22.04
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Tooling
        run: ./.github/scripts/install-tooling.sh
        env:
          INSTALL_PATH: /usr/local/bin
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Deno caching
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*', '**/deps.ts') }}
      - name: Run tests with coverage
        run: task cover
      - name: Report test results
        if: success() || failure()
        uses: codecov/test-results-action@v1
        with:
          files: coverage/report.xml
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Report coverage
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov
          token: ${{ secrets.CODECOV_TOKEN }}
  compile:
    name: Compile binaries
    runs-on: ubuntu-22.04
    needs:
      - checks
      - test
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Tooling
        run: ./.github/scripts/install-tooling.sh
        env:
          INSTALL_PATH: /usr/local/bin
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Deno caching
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*', '**/deps.ts') }}
      - name: Compile
        run: |
          task compile
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path:
            target/
  image:
    name: Build image
    needs:
      - compile
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 12676:5000
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Tooling
        run: ./.github/scripts/install-tooling.sh
        env:
          INSTALL_PATH: /usr/local/bin
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Deno caching
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: deno-${{ runner.os }}-${{ hashFiles('deno.*', '**/deps.ts') }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ github.ref_name == github.event.repository.default_branch }}
        with:
          registry: ${{ env.PUBLISH_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Container Caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ github.sha }}
          restore-keys: buildx-${{ runner.os }}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifact
          path: target
      - name: Build image
        run: |
          if [[ "${{ github.ref_name }}" == "${{ github.event.repository.default_branch}}" ]] ; then
            export IMAGE_TAG="${{ github.sha }}"
            export DOCKER_REGISTRY="${{ env.PUBLISH_REGISTRY }}"
          fi
          task image.only
